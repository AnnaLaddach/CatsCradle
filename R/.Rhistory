f = readRDS("../MarklundSmallIntestineE15.rds")
library(Seurat)
f@graphs$RNA_snn
f@neighbors
dim(f@graphs$RNA_snn)
f@graphs$RNA_snn[1,1]
f@graphs$RNA_snn
f@graphs$RNA_snn[1,2]
obsNames = colnames(f@graphs$RNA_snn)
obsNames
getNearestNeighborListsSeurat = function(f){
nObs = dim(f@graphs$RNA_snn)
obsNames = colnames(f@graphs$RNA_snn)
nodeA = c()
nodeB = c()
edgeWeights = c()
for (i in 1:(nObs-1)){
for (j in (i + 1):nObs){
edgeWeight = f@graphs$RNA_snn[i,j]
if (edgeWeight != 0){
nodeA = c(nodeA, obsNames[i])
nodeB = c(nodeB, obsNames[j])
edgeWeights = c(edgeWeights, edgeWeight)
}
}
}
NeighborLists = list("nodeA" = nodeA,"nodeB" = nodeB,
"edgeWeights" = edgeWeights)
return(NeighborLists)
}
NeighborLists = getNearestNeighborListsSeurat(f)
warnings()
(i + 1):nObs
nObs = dim(f@graphs$RNA_snn)
obsNames = colnames(f@graphs$RNA_snn)
nodeA = c()
nodeB = c()
edgeWeights = c()
1:(nObs-1)
nObs = dim(f@graphs$RNA_snn)[1]
1:(nObs-1)
getNearestNeighborListsSeurat = function(f){
nObs = dim(f@graphs$RNA_snn)[1]
obsNames = colnames(f@graphs$RNA_snn)
nodeA = c()
nodeB = c()
edgeWeights = c()
counter = 1
for (i in 1:(nObs-1)){
for (j in (i + 1):nObs){
counter = counter+1
if (counter %% 100 == 0){
print(counter)
}
edgeWeight = f@graphs$RNA_snn[i,j]
if (edgeWeight != 0){
nodeA = c(nodeA, obsNames[i])
nodeB = c(nodeB, obsNames[j])
edgeWeights = c(edgeWeights, edgeWeight)
}
}
}
NeighborLists = list("nodeA" = nodeA,"nodeB" = nodeB,
"edgeWeights" = edgeWeights)
return(NeighborLists)
}
NeighborLists = getNearestNeighborListsSeurat(f)
nObs
nObs^2
getNearestNeighborListsSeurat = function(f){
nObs = dim(f@graphs$RNA_snn)[1]
obsNames = colnames(f@graphs$RNA_snn)
nodeA = c()
nodeB = c()
edgeWeights = c()
counter = 1
for (i in 1:(nObs-1)){
counter = counter+1
if (counter %% 100 == 0){
print(counter)
}
for (j in (i + 1):nObs){
edgeWeight = f@graphs$RNA_snn[i,j]
if (edgeWeight != 0){
nodeA = c(nodeA, obsNames[i])
nodeB = c(nodeB, obsNames[j])
edgeWeights = c(edgeWeights, edgeWeight)
}
}
}
NeighborLists = list("nodeA" = nodeA,"nodeB" = nodeB,
"edgeWeights" = edgeWeights)
return(NeighborLists)
}
NeighborLists = getNearestNeighborListsSeurat(f)
f@graphs$RNA_snn > 0
sum(f@graphs$RNA_snn > 0)
f@graphs$RNA_snn > 0
which(f@graphs$RNA_snn > 0)
which(f@graphs$RNA_snn > 0, arr.ind = T)
f@graphs$RNA_snn@i
f@graphs$RNA_snn@p
f@graphs$RNA_snn@Dim
f@graphs$RNA_snn@Dimname
f@graphs$RNA_snn@Dimnames
f@graphs$RNA_snn@Dimnames[f@graphs$RNA_snn@i]
f@graphs$RNA_snn@Dimnames
[f@graphs$RNA_snn@i
f@graphs$RNA_snn@i
f@graphs$RNA_snn@Dimnames[1]
f@graphs$RNA_snn@Dimnames[[1]]
f@graphs$RNA_snn@Dimnames
f@graphs$RNA_snn@Dimnames[[1]]
f@graphs$RNA_snn@Dimnames[[1]][f@graphs$RNA_snn@i]
f@graphs$RNA_snn@factors
f@graphs$RNA_snn@x
getNearestNeighborListsSeurat = function(f){
NeighborLists = list("nodeA" = f@graphs$RNA_snn@Dimnames[[1]][f@graphs$RNA_snn@i],"nodeB" =  f@graphs$RNA_snn@Dimnames[[1]][f@graphs$RNA_snn@p],
"edgeWeights" = f@graphs$RNA_snn@i)
return(NeighborLists)
}
NeighborLists = getNearestNeighborListsSeurat(f)
View(NeighborLists)
length(f@graphs$RNA_snn@x)
length(f@graphs$RNA_snn@p)
length(f@graphs$RNA_snn@x)
length(f@graphs$RNA_snn@j)
View(f)
3260*3260
library(Matrix)
graph = as(f@graphs$RNA_snn, "dgCMatrix")
graph = as(f@graphs$RNA_snn, "dgTMatrix")
graph@Dim
graph@Dimnames[graph@i]
NeighborLists = list("nodeA" = graph@Dimnames[[1]][graph@i],"nodeB" =  f@graphs$RNA_snn@Dimnames[[1]][f@graphs$RNA_snn@p],
"edgeWeights" = f@graphs$RNA_snn@i)
graph@
)
graph@Dimnames[[1]]
graph@Dimnames[[1]][graph@i]
getNearestNeighborListsSeurat = function(f){
graph = as(f@graphs$RNA_snn, "dgTMatrix")
NeighborLists = list("nodeA" = graph@Dimnames[[1]][graph@i],"nodeB" =  graph@Dimnames[[2]][graph@j],
"edgeWeights" = graph@x)
return(NeighborLists)
}
NeighborLists = getNearestNeighborListsSeurat(f)
min(graph@i)
length(graph@x)
length(graph@i)
length(graph@j)
getNearestNeighborListsSeurat = function(f){
graph = as(f@graphs$RNA_snn, "dgTMatrix")
NeighborLists = list("nodeA" = graph@Dimnames[[1]][graph@i+1],"nodeB" =  graph@Dimnames[[2]][graph@j+1],
"edgeWeights" = graph@x)
return(NeighborLists)
}
NeighborLists = getNearestNeighborListsSeurat(f)
dropSame = NeighborLists["nodeA"] == NeighborLists["nodeB"]
NeighborLists["nodeA"]
NeighborLists["nodeB"]
NeighborListDf = data.frame("nodeA" = graph@Dimnames[[1]][graph@i+1],"nodeB" =  graph@Dimnames[[2]][graph@j+1],
"edgeWeights" = graph@x)
NeighborListDf[NeighborListDf$nodeA != NeighborListDf$nodeB,]
getNearestNeighborListsSeurat = function(f){
graph = as(f@graphs$RNA_snn, "dgTMatrix")
NeighborListDf = data.frame("nodeA" = graph@Dimnames[[1]][graph@i+1],"nodeB" =  graph@Dimnames[[2]][graph@j+1],
"edgeWeights" = graph@x)
NeighborListDf = NeighborListDf[NeighborListDf$nodeA != NeighborListDf$nodeB,]
return(NeighborLists)
}
getNearestNeighborListsSeurat = function(f){
graph = as(f@graphs$RNA_snn, "dgTMatrix")
NeighborListDf = data.frame("nodeA" = graph@Dimnames[[1]][graph@i+1],"nodeB" =  graph@Dimnames[[2]][graph@j+1],
"edgeWeights" = graph@x)
NeighborListDf = NeighborListDf[NeighborListDf$nodeA != NeighborListDf$nodeB,]
return(NeighborListDf)
}
NeighborLists = getNearestNeighborListsSeurat(f)
head(NeighborListDf)
unique(edgeWeights)
unique(NeighborLists$edgeWeights)
## ####################################################
#' This function extracts a nearest neighbor network
#' from a Seurat object
#'
#' @param f - a Seurat object
#' @return - This returns dataframe of neighbors:
#' nodeA - node names for node A
#' nodeB  - node names for node B
#' weight - edge weight
getNearestNeighborListsSeurat = function(f){
graph = as(f@graphs$RNA_snn, "dgTMatrix")
NeighborListDf = data.frame("nodeA" = graph@Dimnames[[1]][graph@i+1],"nodeB" =  graph@Dimnames[[2]][graph@j+1],
"weight" = graph@x)
NeighborListDf = NeighborListDf[NeighborListDf$nodeA != NeighborListDf$nodeB,]
return(NeighborListDf)
}
## ####################################################
#' This function extracts a nearest neighbor network
#' from a Seurat object
#'
#' @param f - a Seurat object
#' @return - This returns dataframe of neighbors:
#' nodeA - node names for node A
#' nodeB  - node names for node B
#' weight - edge weight
getNearestNeighborListsSeurat = function(f){
graph = as(f@graphs$RNA_snn, "dgTMatrix")
neighborListDf = data.frame("nodeA" = graph@Dimnames[[1]][graph@i+1],"nodeB" =  graph@Dimnames[[2]][graph@j+1],
"weight" = graph@x)
neighborListDf = neighborListDf[NeighborListDf$nodeA != NeighborListDf$nodeB,]
return(NeighborListDf)
}
?sample
n = 100
randomIndices = matrix(, nrow = nrow(NeighborListDf), ncol = n)
dim(randomIndices)
sample(NeighborListDf$nodeB)
sample(1:10)
sample(1:10)
sample(1:10)
randomIndices = randomiseEdges(NeighborListDf, 1000)
randomiseEdges = function(NeighborListDf, n){
nEdges = nrow(NeighborListDf)
randomIndices = matrix(, nrow = nEdges, ncol = n)
for (i in 1:n){
randomIndices[,i] = sample(1:nEdges)
}
return(randomIndices)
}
randomIndices = randomiseEdges(NeighborListDf, 1000)
## ####################################################
#' This function extracts a nearest neighbor network
#' from a Seurat object
#'
#' @param f - a Seurat object
#' @return - This returns dataframe of neighbors:
#' nodeA - node names for node A
#' nodeB  - node names for node B
#' weight - edge weight
getNearestNeighborListsSeurat = function(f){
graph = as(f@graphs$RNA_snn, "dgTMatrix")
neighborListDf = data.frame("nodeA" = graph@Dimnames[[1]][graph@i+1],"nodeB" =  graph@Dimnames[[2]][graph@j+1],
"weight" = graph@x)
neighborListDf = neighborListDf[neighborListDf$nodeA != neighborListDf$nodeB,]
return(NeighborListDf)
}
## ##############
neighborLists = getNearestNeighborListsSeurat(f)
NeighborListDf = getNearestNeighborListsSeurat(f)
neighborListDf = getNearestNeighborListsSeurat(f)
getNearestNeighborListsSeurat = function(f){
graph = as(f@graphs$RNA_snn, "dgTMatrix")
neighborListDf = data.frame("nodeA" = graph@Dimnames[[1]][graph@i+1],"nodeB" =  graph@Dimnames[[2]][graph@j+1],
"weight" = graph@x)
neighborListDf = neighborListDf[neighborListDf$nodeA != neighborListDf$nodeB,]
return(NeighborListDf)
}
getNearestNeighborListsSeurat = function(f){
graph = as(f@graphs$RNA_snn, "dgTMatrix")
neighborListDf = data.frame("nodeA" = graph@Dimnames[[1]][graph@i+1],"nodeB" =  graph@Dimnames[[2]][graph@j+1],
"weight" = graph@x)
neighborListDf = neighborListDf[neighborListDf$nodeA != neighborListDf$nodeB,]
return(neighborListDf)
}
neighborListDf = getNearestNeighborListsSeurat(f)
## ####################################################
#' This function generates random indices for node B
#'
#' @param neighborListDf - a dataframe containing the neighborlist
#' @param n - the number of random graphs to create
#' @param useWeights - whether to preserve edgeweights.
#' @return - a matrix with randomised indices for node B
randomiseEdges = function(neighborListDf, n, useWeights = F){
nEdges = nrow(neighborListDf)
randomIndices = matrix(, nrow = nEdges, ncol = n)
if (useWeights){
weights = unique(neighborListDf$)
}
else {
for (i in 1:n){
randomIndices[,i] = sample(1:nEdges)
}
}
return(randomIndices)
}
randomiseEdges = function(neighborListDf, n, useWeights = F){
nEdges = nrow(neighborListDf)
randomIndices = matrix(, nrow = nEdges, ncol = n)
if (useWeights){
weights = unique(neighborListDf$)
}
else {
for (i in 1:n){
randomIndices[,i] = sample(1:nEdges)
}
}
return(randomIndices)
}
neighborListDf = getNearestNeighborListsSeurat(f)
weights = unique(neighborListDf$weight)
weights
dim(neighborListDf)
neighborListDf[neighborListDf$weight == 1,]
1:nEdges[neighborListDf$weight]
nEdges = nrow(neighborListDf)
1:nEdges[neighborListDf$weight]
selected = neighborListDf$weight == weight
weight = weights[1]
selected = neighborListDf$weight == weight
selected
1:nEdges[selected]
indices = 1:nEdges
indices[selected]
randomiseEdges = function(neighborListDf, n, useWeights = F){
nEdges = nrow(neighborListDf)
indices = 1:nEdges
randomIndices = matrix(, nrow = nEdges, ncol = n)
if (useWeights){
weights = unique(neighborListDf$weight)
for (weight in weights){
selected = neighborListDf$weight == weight
randomIndices[selected,i] =
sample(indices[selected])
}
}
else {
for (i in 1:n){
randomIndices[,i] = sample(indices)
}
}
return(randomIndices)
}
randomIndices = randomiseEdges(NeighborListDf, 100)
randomIndicesWeights = randomiseEdges(NeighborListDf, 100, useWeights = T)
randomiseEdges = function(neighborListDf, n, useWeights = F){
nEdges = nrow(neighborListDf)
indices = 1:nEdges
randomIndices = matrix(, nrow = nEdges, ncol = n)
if (useWeights){
print("yes")
weights = unique(neighborListDf$weight)
for (weight in weights){
selected = neighborListDf$weight == weight
randomIndices[selected,i] =
sample(indices[selected])
}
}
else {
for (i in 1:n){
randomIndices[,i] = sample(indices)
}
}
return(randomIndices)
}
randomIndicesWeights = randomiseEdges(NeighborListDf, 100, useWeights = T)
randomIndicesWeights
randomiseEdges = function(neighborListDf, n, useWeights = F){
nEdges = nrow(neighborListDf)
indices = 1:nEdges
randomIndices = matrix(, nrow = nEdges, ncol = n)
if (useWeights){
print("yes")
weights = unique(neighborListDf$weight)
for (weight in weights){
selected = neighborListDf$weight == weight
print(weight)
print(selected)
return()
randomIndices[selected,i] =
sample(indices[selected])
}
}
else {
for (i in 1:n){
randomIndices[,i] = sample(indices)
}
}
return(randomIndices)
}
randomIndicesWeights = randomiseEdges(NeighborListDf, 100, useWeights = T)
randomiseEdges = function(neighborListDf, n, useWeights = F){
nEdges = nrow(neighborListDf)
indices = 1:nEdges
randomIndices = matrix(, nrow = nEdges, ncol = n)
if (useWeights){
print("yes")
weights = unique(neighborListDf$weight)
print(weights)
for (weight in weights){
selected = neighborListDf$weight == weight
print(weight)
print(selected)
return()
randomIndices[selected,i] =
sample(indices[selected])
}
}
else {
for (i in 1:n){
randomIndices[,i] = sample(indices)
}
}
return(randomIndices)
}
randomIndicesWeights = randomiseEdges(NeighborListDf, 100, useWeights = T)
randomIndicesWeights = randomiseEdges(neighborListDf, 100, useWeights = T)
randomiseEdges = function(neighborListDf, n, useWeights = F){
nEdges = nrow(neighborListDf)
indices = 1:nEdges
randomIndices = matrix(, nrow = nEdges, ncol = n)
if (useWeights){
weights = unique(neighborListDf$weight)
print(weights)
for (weight in weights){
selected = neighborListDf$weight == weight
randomIndices[selected,i] =
sample(indices[selected])
}
}
else {
for (i in 1:n){
randomIndices[,i] = sample(indices)
}
}
return(randomIndices)
}
randomIndicesWeights = randomiseEdges(neighborListDf, 100, useWeights = T)
randomIndicesWeights
n = 100
useWeights = T
nEdges = nrow(neighborListDf)
indices = 1:nEdges
randomIndices = matrix(, nrow = nEdges, ncol = n)
if (useWeights){
weights = unique(neighborListDf$weight)
print(weights)
for (weight in weights){
selected = neighborListDf$weight == weight
randomIndices[selected,i] =
sample(indices[selected])
}
}
weight = weights[1]
selected = neighborListDf$weight == weight
randomIndices[selected,i] =
sample(indices[selected])
randomIndices[selected,i]
nEdges = nrow(neighborListDf)
indices = 1:nEdges
randomIndices = matrix(, nrow = nEdges, ncol = n)
if (useWeights){
weights = unique(neighborListDf$weight)
print(weights)
for (weight in weights){
selected = neighborListDf$weight == weight
randomIndices[selected,i] =
sample(indices[selected])
}
}
randomIndices
randomiseEdges = function(neighborListDf, n, useWeights = F){
nEdges = nrow(neighborListDf)
indices = 1:nEdges
randomIndices = matrix(, nrow = nEdges, ncol = n)
if (useWeights){
weights = unique(neighborListDf$weight)
print(weights)
for (i in 1:n){
for (weight in weights){
selected = neighborListDf$weight == weight
randomIndices[selected,i] =
sample(indices[selected])
}
}
}
else {
for (i in 1:n){
randomIndices[,i] = sample(indices)
}
}
return(randomIndices)
}
randomIndicesWeights = randomiseEdges(neighborListDf, 100, useWeights = T)
randomIndicesWeights
randomiseNodeIndices = function(neighborListDf, n = 100, useWeights = F){
#determine number of edges and create empty matrix for randomised indices
nEdges = nrow(neighborListDf)
indices = 1:nEdges
randomIndices = matrix(, nrow = nEdges, ncol = n)
#check if weights are to be used
if (useWeights){
#determine unique weights
weights = unique(neighborListDf$weight)
for (i in 1:n){
#randomise indices within each weight category
for (weight in weights){
selected = neighborListDf$weight == weight
randomIndices[selected,i] =
sample(indices[selected])
}
}
}
#otherwise ignore weights and randomise indices
else {
for (i in 1:n){
randomIndices[,i] = sample(indices)
}
}
return(randomIndices)
}

genesPredictedTerms = list()
for (gene in genes){
genesPredictedTerms[[gene]] = list()
print(length(fPrime@graphs$RNA_snn[gene,]))
neigbors = genes[fPrime@graphs$RNA_snn[gene,] > 0]
total = sum(fPrime@graphs$RNA_snn[gene,])
for (neighbor in neighbors){
weight = fPrime@graphs$RNA_snn[gene,neighbor]
if (normalise){
weight = weight/total
}
terms = genesAnno[[neighbor]]
for (term in terms){
if (term %in% names(genesPredictedTerms[[gene]])){
genesPredictedTerms[[gene]] =
genesPredictedTerms[[gene]] + weight
} else {
genesPredictedTerms[[gene]] = weight
}
}
}
}
return(genesPredictedTerms)
}
genesPredictedTerms = neighborTerms(fPrime,genesAnno)
neighborTerms = function(fPrime,genesAnno, normalise = T){
genes = rownames(fPrime@graphs$RNA_snn)
genesPredictedTerms = list()
for (gene in genes){
genesPredictedTerms[[gene]] = list()
print(length(fPrime@graphs$RNA_snn[gene,]))
neigbors = genes[fPrime@graphs$RNA_snn[gene,] > 0]
print(neighbors)
total = sum(fPrime@graphs$RNA_snn[gene,])
for (neighbor in neighbors){
weight = fPrime@graphs$RNA_snn[gene,neighbor]
if (normalise){
weight = weight/total
}
terms = genesAnno[[neighbor]]
for (term in terms){
if (term %in% names(genesPredictedTerms[[gene]])){
genesPredictedTerms[[gene]] =
genesPredictedTerms[[gene]] + weight
} else {
genesPredictedTerms[[gene]] = weight
}
}
}
}
return(genesPredictedTerms)
}
genesPredictedTerms = neighborTerms(fPrime,genesAnno)
neighborTerms = function(fPrime,genesAnno, normalise = T){
genes = rownames(fPrime@graphs$RNA_snn)
genesPredictedTerms = list()
for (gene in genes){
genesPredictedTerms[[gene]] = list()
print(length(fPrime@graphs$RNA_snn[gene,]))
neighbors = genes[fPrime@graphs$RNA_snn[gene,] > 0]
total = sum(fPrime@graphs$RNA_snn[gene,])
for (neighbor in neighbors){
weight = fPrime@graphs$RNA_snn[gene,neighbor]
if (normalise){
weight = weight/total
}
terms = genesAnno[[neighbor]]
for (term in terms){
if (term %in% names(genesPredictedTerms[[gene]])){
genesPredictedTerms[[gene]] =
genesPredictedTerms[[gene]] + weight
} else {
genesPredictedTerms[[gene]] = weight
}
}
}
}
return(genesPredictedTerms)
}
genesPredictedTerms = neighborTerms(fPrime,genesAnno)
neighborTerms = function(fPrime,genesAnno, normalise = T){
genes = rownames(fPrime@graphs$RNA_snn)
genesPredictedTerms = list()
i += 1
for (gene in genes){
if (i %% 100 == 0){
print(i)
}
genesPredictedTerms[[gene]] = list()
neighbors = genes[fPrime@graphs$RNA_snn[gene,] > 0]
total = sum(fPrime@graphs$RNA_snn[gene,])
for (neighbor in neighbors){
weight = fPrime@graphs$RNA_snn[gene,neighbor]
if (normalise){
weight = weight/total
}
terms = genesAnno[[neighbor]]
for (term in terms){
if (term %in% names(genesPredictedTerms[[gene]])){
genesPredictedTerms[[gene]] =
genesPredictedTerms[[gene]] + weight
} else {
genesPredictedTerms[[gene]] = weight
}
}
}
}
return(genesPredictedTerms)
}
genesPredictedTerms = neighborTerms(fPrime,genesAnno)
neighborTerms = function(fPrime,genesAnno, normalise = T){
genes = rownames(fPrime@graphs$RNA_snn)
genesPredictedTerms = list()
i += 1
for (gene in genes){
if (i %% 100 == 0){
print(i)
}
genesPredictedTerms[[gene]] = list()
neighbors = genes[fPrime@graphs$RNA_snn[gene,] > 0]
total = sum(fPrime@graphs$RNA_snn[gene,])
for (neighbor in neighbors){
weight = fPrime@graphs$RNA_snn[gene,neighbor]
if (normalise){
weight = weight/total
}
terms = genesAnno[[neighbor]]
for (term in terms){
if (term %in% names(genesPredictedTerms[[gene]])){
genesPredictedTerms[[gene]] =
genesPredictedTerms[[gene]] + weight
} else {
genesPredictedTerms[[gene]] = weight
}
}
}
}
return(genesPredictedTerms)
}
genesPredictedTerms = neighborTerms(fPrime,genesAnno)
neighborTerms = function(fPrime,genesAnno, normalise = T){
genes = rownames(fPrime@graphs$RNA_snn)
genesPredictedTerms = list()
i += 1
for (gene in genes){
if (i %% 100 == 0){
print(i)
}
i = i + 1
genesPredictedTerms[[gene]] = list()
neighbors = genes[fPrime@graphs$RNA_snn[gene,] > 0]
total = sum(fPrime@graphs$RNA_snn[gene,])
for (neighbor in neighbors){
weight = fPrime@graphs$RNA_snn[gene,neighbor]
if (normalise){
weight = weight/total
}
terms = genesAnno[[neighbor]]
for (term in terms){
if (term %in% names(genesPredictedTerms[[gene]])){
genesPredictedTerms[[gene]] =
genesPredictedTerms[[gene]] + weight
} else {
genesPredictedTerms[[gene]] = weight
}
}
}
}
return(genesPredictedTerms)
}
genesPredictedTerms = neighborTerms(fPrime,genesAnno)
neighborTerms = function(fPrime,genesAnno, normalise = T){
genes = rownames(fPrime@graphs$RNA_snn)
genesPredictedTerms = list()
i += 1
for (gene in genes){
if (i %% 100 == 0){
#print(i)
}
i = i + 1
genesPredictedTerms[[gene]] = list()
neighbors = genes[fPrime@graphs$RNA_snn[gene,] > 0]
total = sum(fPrime@graphs$RNA_snn[gene,])
for (neighbor in neighbors){
weight = fPrime@graphs$RNA_snn[gene,neighbor]
if (normalise){
weight = weight/total
}
terms = genesAnno[[neighbor]]
for (term in terms){
if (term %in% names(genesPredictedTerms[[gene]])){
genesPredictedTerms[[gene]] =
genesPredictedTerms[[gene]] + weight
} else {
genesPredictedTerms[[gene]] = weight
}
}
}
}
return(genesPredictedTerms)
}
genesPredictedTerms = neighborTerms(fPrime,genesAnno)
genes = rownames(fPrime@graphs$RNA_snn)
genesPredictedTerms = list()
i += 1
genes = rownames(fPrime@graphs$RNA_snn)
genesPredictedTerms = list()
i = 1
for (gene in genes){
if (i %% 100 == 0){
#print(i)
}
i = i + 1
genesPredictedTerms[[gene]] = list()
neighbors = genes[fPrime@graphs$RNA_snn[gene,] > 0]
total = sum(fPrime@graphs$RNA_snn[gene,])
for (neighbor in neighbors){
weight = fPrime@graphs$RNA_snn[gene,neighbor]
if (normalise){
weight = weight/total
}
terms = genesAnno[[neighbor]]
for (term in terms){
if (term %in% names(genesPredictedTerms[[gene]])){
genesPredictedTerms[[gene]] =
genesPredictedTerms[[gene]] + weight
} else {
genesPredictedTerms[[gene]] = weight
}
}
}
}
normalise = T
genes = rownames(fPrime@graphs$RNA_snn)
genesPredictedTerms = list()
i = 1
for (gene in genes){
if (i %% 100 == 0){
#print(i)
}
i = i + 1
genesPredictedTerms[[gene]] = list()
neighbors = genes[fPrime@graphs$RNA_snn[gene,] > 0]
total = sum(fPrime@graphs$RNA_snn[gene,])
for (neighbor in neighbors){
weight = fPrime@graphs$RNA_snn[gene,neighbor]
if (normalise){
weight = weight/total
}
terms = genesAnno[[neighbor]]
for (term in terms){
if (term %in% names(genesPredictedTerms[[gene]])){
genesPredictedTerms[[gene]] =
genesPredictedTerms[[gene]] + weight
} else {
genesPredictedTerms[[gene]] = weight
}
}
}
}
neighborTerms = function(fPrime,genesAnno, normalise = T){
genes = rownames(fPrime@graphs$RNA_snn)
genesPredictedTerms = list()
i = 1
for (gene in genes){
if (i %% 100 == 0){
print(i)
}
i = i + 1
genesPredictedTerms[[gene]] = list()
neighbors = genes[fPrime@graphs$RNA_snn[gene,] > 0]
total = sum(fPrime@graphs$RNA_snn[gene,])
for (neighbor in neighbors){
weight = fPrime@graphs$RNA_snn[gene,neighbor]
if (normalise){
weight = weight/total
}
terms = genesAnno[[neighbor]]
for (term in terms){
if (term %in% names(genesPredictedTerms[[gene]])){
genesPredictedTerms[[gene]] =
genesPredictedTerms[[gene]] + weight
} else {
genesPredictedTerms[[gene]] = weight
}
}
}
}
return(genesPredictedTerms)
}
genesPredictedTerms = neighborTerms(fPrime,genesAnno)
genesPredictedTerms$Vip
neighborTerms = function(fPrime,genesAnno, normalise = T){
genes = rownames(fPrime@graphs$RNA_snn)
genesPredictedTerms = list()
i = 1
for (gene in genes){
if (i %% 100 == 0){
print(paste(i, "genes processed"))
}
i = i + 1
genesPredictedTerms[[gene]] = list()
neighbors = genes[fPrime@graphs$RNA_snn[gene,] > 0]
total = sum(fPrime@graphs$RNA_snn[gene,])
for (neighbor in neighbors){
weight = fPrime@graphs$RNA_snn[gene,neighbor]
if (normalise){
weight = weight/total
}
if (!(neighbor %in% names(genesAnno))){
next
}
terms = genesAnno[[neighbor]]
for (term in terms){
if (term %in% names(genesPredictedTerms[[gene]])){
genesPredictedTerms[[gene]][[term]] =
genesPredictedTerms[[gene]][[term]] + weight
} else {
genesPredictedTerms[[gene]][[term]] = weight
}
}
}
}
return(genesPredictedTerms)
}
genesPredictedTerms = neighborTerms(fPrime,genesAnno)
genesPredictedTerms$Vip$`GO:0000003 reproduction`
genesPredictedTerms$Cenpa$`GO:0000003 reproduction`
genesAnno$Top3a
annotateGenes = function(geneSets){
#this is a bit slow for large collections of gene sets (a few minutes)
#think about whether it's necessary to speed up
genesAnno = list()
for (geneSet in names(geneSets)){
for (gene in geneSets[[geneSet]]){
if (gene %in% names(genes)){
genesAnno[[gene]] = c(genesAnno[[gene]], geneSet)
}
else {
genesAnno[[gene]] = c(geneSet)
}
}
}
return(genesAnno)
}
genesSets
geneSets
genesAnno = annotateGenes(geneSets)
genesAnno$Top3a
genesAnno = list()
for (geneSet in names(geneSets)){
for (gene in geneSets[[geneSet]]){
if (gene %in% names(genes)){
genesAnno[[gene]] = c(genesAnno[[gene]], geneSet)
}
else {
genesAnno[[gene]] = c(geneSet)
}
}
}
geneSet
#this is a bit slow for large collections of gene sets (a few minutes)
#think about whether it's necessary to speed up
genesAnno = list()
for (geneSet in names(geneSets)){
for (gene in geneSets[[geneSet]]){
if (gene %in% names(genes)){
print(genesAnno[[gene]])
genesAnno[[gene]] = c(genesAnno[[gene]], geneSet)
print(genesAnno[[gene]])
retudn()
}
else {
genesAnno[[gene]] = c(geneSet)
}
}
}
return(genesAnno)
annotateGenes = function(geneSets){
#this is a bit slow for large collections of gene sets (a few minutes)
#think about whether it's necessary to speed up
genesAnno = list()
for (geneSet in names(geneSets)){
for (gene in geneSets[[geneSet]]){
if (gene %in% names(genesAnno)){
genesAnno[[gene]] = c(genesAnno[[gene]], geneSet)
}
else {
genesAnno[[gene]] = c(geneSet)
}
}
}
return(genesAnno)
}
genesAnno = annotateGenes(geneSets)
genesAnno$Top3a
genesPredictedTerms = neighborTerms(fPrime,genesAnno)
length(genesPredictedTerms$Cartpt)
genesPredictedTerms$Cartpt
genesPredictedTerms[[gene]]
gene
genesPredictedTerms$Vip
genesPredictedTerms$Vip[order(genesPredictedTerms$Vip)]
list(genesPredictedTerms$Vip)
c(genesPredictedTerms$Vip)
as.character(genesPredictedTerms$Vip)
as.numeric(genesPredictedTerms$Vip)
neighborTerms = function(fPrime,genesAnno, normalise = T){
#determine genes
genes = rownames(fPrime@graphs$RNA_snn)
genesPredictedTerms = list()
i = 1
#iterate through genes
for (gene in genes){
if (i %% 100 == 0){
print(paste(i, "genes processed"))
}
i = i + 1
genesPredictedTerms[[gene]] = list()
#determine neighbors
neighbors = genes[fPrime@graphs$RNA_snn[gene,] > 0]
neighbors = neighbors[neighbors != gene]
#calculate total weight of edges to neighbors
total = sum(fPrime@graphs$RNA_snn[gene,])
#iterate through neighbors
for (neighbor in neighbors){
#determine weight of connecting edge and normalise if T
weight = fPrime@graphs$RNA_snn[gene,neighbor]
if (normalise){
weight = weight/total
}
if (!(neighbor %in% names(genesAnno))){
next
}
#extract terms for neighbor
terms = genesAnno[[neighbor]]
#add these to predicted terms with appropriate weights
for (term in terms){
if (term %in% names(genesPredictedTerms[[gene]])){
genesPredictedTerms[[gene]][[term]] =
genesPredictedTerms[[gene]][[term]] + weight
} else {
genesPredictedTerms[[gene]][[term]] = weight
}
}
}
termNames = names(genesPredictedTerms[[gene]])
genesPredictedTerms[[gene]] = as.numeric(genesPredictedTerms[[gene]])
names(genesPredictedTerms[[gene]]) = termNames
genesPredictedTerms[[gene]]
=  genesPredictedTerms[[gene]][order(-genesPredictedTerms[[gene]])]
}
return(genesPredictedTerms)
}
neighborTerms = function(fPrime,genesAnno, normalise = T){
#determine genes
genes = rownames(fPrime@graphs$RNA_snn)
genesPredictedTerms = list()
i = 1
#iterate through genes
for (gene in genes){
if (i %% 100 == 0){
print(paste(i, "genes processed"))
}
i = i + 1
genesPredictedTerms[[gene]] = list()
#determine neighbors
neighbors = genes[fPrime@graphs$RNA_snn[gene,] > 0]
neighbors = neighbors[neighbors != gene]
#calculate total weight of edges to neighbors
total = sum(fPrime@graphs$RNA_snn[gene,])
#iterate through neighbors
for (neighbor in neighbors){
#determine weight of connecting edge and normalise if T
weight = fPrime@graphs$RNA_snn[gene,neighbor]
if (normalise){
weight = weight/total
}
if (!(neighbor %in% names(genesAnno))){
next
}
#extract terms for neighbor
terms = genesAnno[[neighbor]]
#add these to predicted terms with appropriate weights
for (term in terms){
if (term %in% names(genesPredictedTerms[[gene]])){
genesPredictedTerms[[gene]][[term]] =
genesPredictedTerms[[gene]][[term]] + weight
} else {
genesPredictedTerms[[gene]][[term]] = weight
}
}
}
termNames = names(genesPredictedTerms[[gene]])
genesPredictedTerms[[gene]] = as.numeric(genesPredictedTerms[[gene]])
names(genesPredictedTerms[[gene]]) = termNames
genesPredictedTerms[[gene]] =  genesPredictedTerms[[gene]][order(-genesPredictedTerms[[gene]])]
}
return(genesPredictedTerms)
}
genesPredictedTerms = neighborTerms(fPrime,genesAnno)
as.numeric(genesPredictedTerms$Vip)
genesPredictedTerms$Cartpt
names(genes$genesPredictedTerms$Vip)
names(genesPredictedTerms$Vip)
names(genesPredictedTerms$Vip)[1:10]
names(genesPredictedTerms$Vip)[1:20]
names(genesPredictedTerms$Vip)[1:40]
names(genesPredictedTerms$Vip)[1:100]
names(genesPredictedTerms$Cenpa)[1:100]
genesPredictedTerms$Cenpa[1:10]
names(genesPredictedTerms$Cenpa)[1:10]

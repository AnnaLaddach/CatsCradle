---
title: "Cats Cradle Overview"
author: "Anna Laddach and Michael Shapiro"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
    %\VignetteIndexEntry{CatsCradleOverview}
    %\VignetteEngine{knitr::rmarkdown}
    %\VignetteEncoding{UTF-8}
---

```{r setup, include = FALSE, warning = FALSE}
knitr::opts_chunk$set(
    collapse = TRUE,
    fig.dim = c(6,6),
    comment = "#>"
)
```
## Introduction

Cats Cradle provides two types of functionality for analysing single
cell data.  It provides tools for the clustering and annotation of
genes and it provides extensive tools for analysing spatial
transcriptomic data.

## Clustering and annotation of genes

A typical Seurat analysis involves dimension reduction (PCA, UMAP,
tSNE) and the clustering of cells using the louvain algorithm. All of
this is done based on the similarities and differences in the genes
they express.

```{r}
library(Seurat)
library(CatsCradle)
DimPlot(S,cols='polychrome')
```

By transposing the expression matrix, we can use the same technology
to produce a Seurat object where the objects are the genes.  They have
their own UMAP and their own clustering.  This is all done on the
basis of the similarities and differences in the cells they are
expressed in.

```{r}
library(Seurat)
library(CatsCradle)
DimPlot(STranspose,cols='polychrome')
```

### Gene clusters vs. cell clusters

There are a number of ways of investigating the relationship between
gene clusters and cell clusters.  One is by computing the average
expression of each gene cluster in each cell cluster and this can be
displayed as a heat map or a Sankey graph - the cat's cradle of our
CatsCradle. (See getAverageExpressionMatrix() and sankeyFromMatrix()
in the CatsCradle vignette.)  

### Spatial co-location on gene UMAP

Gene sets such as Hallmark tend to localise on gene UMAP, though they
are not necessarily confined to specific gene clusters.  Here we show
HALLMARK_OXIDATIVE_PHOSPHORYLATION.

```{r}
library(Seurat)
library(CatsCradle)
library(ggplot2)
h = 'HALLMARK_OXIDATIVE_PHOSPHORYLATION'
umap = FetchData(STranspose,c('umap_1','umap_2'))
idx = colnames(STranspose) %in% hallmark[[h]]
g = DimPlot(STranspose,cols='polychrome') +
    geom_point(data=umap[idx,],aes(x=umap_1,y=umap_2),color='black') +
    ggtitle(paste(h,'on gene clusters'))
print(g)
pValue = getSeuratSubsetClusteringPValue(STranspose,idx)
```

This reports a p-value for the geometric clustering of these genes of
0.001. Here this is limited by the default number of randomisation
trials in getSubsetClusteringPValue().  Of the 50 Hallmark gene sets,
31 have clustering p-values less than 0.05.

### Gene annotation

This suggests propose annotations for a given gene by looking at
annotations for its neighbouring genes.  If a gene has its own
annotation and also has neighbours which have annotations, we can
compare the actual annotation to the predicted annotation based on its
neighbours. The predictions perform well above chance.  This is
described in the section Predicting gene function of the CatsCradle
vignette.

## Analysis of spatial transcriptomic data

CatsCradle provides extensive tools for the analysis of spatial
transcriptomic data.  Here we see cell type plotted on the centroids
of our example data.

```{r}
ImageDimPlot(smallXenium,cols='polychrome')
```

With Moran's I, we can see localisation of gene expression and compute
p-values for this localisation.  See Cats Cradle spatial vignette.


### Neighbourhoods

The key concept in our analysis of this kind of data is the
_neighbourhood_. In general, a neighbourhood is a contiguous set of
cells.  In all of our use cases, each neighbourhood is set of cells
_around_ a given cell.  Accordingly, a neighbourhood can be referred
to by the name of the cell at its centre.

The simplest type of neighbourhood arises from Delaunay
triangulation.  This is an undirected graph in which each cell has an
edge connecting it to each of its immediate neighbours.

```{r}
head(delaunayNeighbours,10)
```

We can also make extended neighbourhoods, e.g., by finding the
neighbours of each cell, their neighbours, and their neighbours.
getExtendedNBHDs() produces a list characterising these neighbours by
their combinatorial radius and collapseExtendedNBHDs() collapses
these so that all the extended neighbours of each cell are now treated
as neighbours.

In addition, neighbourhoods can be found on the basis of Euclidean
distance.

For each cell type A, we can ask "What types of cells are found around
cells of type A?"  We can display the answer in a directed graph. Here
we are using an extended neighbourhood.  A fat arrow from type A to
type B indicates that neighbourhoods around type A have lots of cells
of type B.

```{r}
cellTypesPerCellTypeMatrixExtended = computeCellTypesPerCellTypeMatrix(NBHDByCTMatrixExtended,clusters)

cellTypesPerCellTypeGraphFromCellMatrix(cellTypesPerCellTypeMatrixExtended, minWeight = 0.05, colours = colours)
```

We can also test for statistical significance for the enrichment of a
given cell type in the neighbourhoods around another cell type.


### Neighourhood Seurat objects.

Neighbourhoods naturally want to be encoded into Seurat objects.
There are two ways to do this.

#### Neighbourhoods and cell types

Just as cells express genes, with poetic license we can say that
neighbourhoods "express" cell types.  A cell types by neighbourhoods
matrix gives the counts of cells of each type in each neighbourhood.
This can be taken as the counts matrix for a Seurat object.  We can
then use the Louvain algorithm to cluster neighbourhoods into
neighbourhood types.

Here we attach these neighbourhood_clusters from a neighbourhood
Seurat object (created by computeNBHDVsCTSeurat()) to our original
spatial object and visualize the neighbourhood clusters on tissue
coordinates. (Again, we are using extended neighbourhoods.)

```{r}
smallXenium$NBHDClusterExtended= 
  NBHDByCTSeuratExtended@active.ident
ImageDimPlot(smallXenium, group.by = c("NBHDClusterExtended"), 
             size = 1, cols = "polychrome")
```

### Aggregate gene expression

As well as expressing cell types, neighbourhoods express genes.  We
can take the gene expression profile of a neighbourhood to be the
total aggregate expression of each gene across all cells in the
neighbourhood.  This produces a genes by neighbourhoods count
matrix. The function aggregateSeuratGeneExpression() takes as
arguments an underlying Seurat object and a set of neighbourhoods and
produces a Seurat object where the rows are the genes of the
underlying Seurat object and the columns are the neighbourhoods.
Since each neighbourhood corresponds to a cell in our usage, this is
formally indistinguishable from a normal Seurat object.

This enables all the usual analyses: dimension reduction and Louvain
clustering (here giving another clustering of the neighbourhoods). In
addition, we can find the marker genes giving the transcriptomic
differences between the neighbourhood types.

```{r}
agg = aggregateSeuratGeneExpression(smallXenium,extendedNeighbours)
smallXenium$aggregateNBHDClusters = agg@active.ident
ImageDimPlot(smallXenium,group.by='aggregateNBHDClusters',cols='polychrome')
```

Notice that since our neighbourhoods are all indexed by cells, we can
compare the different methods of clustering neighbourhoods.  Here we
compare the clustering based on cell types in our extended
neighbourhoods to that based on aggregate gene expression. and see,
for example, that aggregation cluster 9 is predominantly made up of
celltype cluster 2.

![comparing neighbourhood clusterings](aggregationVsCelltypeNbhdClustering.png){width=6in}


## Ligand Receptor analysis

The Delaunay triangulation gives us an opportunity to look at the
ligand-receptor interactions between neighbouring cells.  We use the
Nichenetr ligand-receptor pairs to discover the pairs in our gene
panel.  Nichnetr lists over eleven thousand ligand-receptor pairs.  Of
these 28 appear in our example panel.

The main function for carrying out ligand-receptor analysis is
performLigandReceptorAnalysis().  This produces an object with
multiple fields.  These include a data frame interactionsOnEdges.
Here the first two columns are nodeA and nodeB which give the edge in
question.  The remaining columns are logicals, each corresponding to a
particular ligand-receptor pair and indicating whether that pair is
present on that edge.  Notice that while the neighbour-neighbour
relationship in the Delaunay triangulation is undirected, the
ligand-receptor relationship is directed.  Accordingly, in
interactionsOnEdges, a given edge appears as both the pair cell A -
cell B and as the pair cell B - cell A.  

 Other fields are downstream of this data frame.  For example, pValue
tells whether a given ligand-receptor is statistically significantly
enriched in the interactions between two specific cell types.  For
further details see the section Ligand receptor analysis in the Cats
Cradle Spatial vignette.





